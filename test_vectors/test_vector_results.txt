WBigCalc - test vector results
==============================
I initially used Gnu bc calculator for comparison values, but it turns out to be
problematic with various transcendental functions, so I switched to an online site:
https://www.mathsisfun.com/calculator-precision.html
This source is represented below by 'FPC'

Reference sources:
WA:  WolframAlpha
bc:  Gnu bc calculator
FPC: https://www.mathsisfun.com/calculator-precision.html
py:  python 3.13.0

Note: 18446744073709551615 = max_u64  (i.e., the largest 64-bit number)  
This is the base from which other numbers in the test vectors are derived.

- multiply  
scr_cubed.txt, cubed.bc  
X:  6277101735386680762814942322444851025767571854389858533375
bc: 6277101735386680762814942322444851025767571854389858533375

- sqrt  
scr_sqrt.txt, sqrt.bc  
X:  79228162514264337587101499392.000000000087311491369  
bc: 79228162514264337587101499392.00000000008731149137020111084063261090522101180542
WA: 79228162514264337587101499392.00000000008731149137020111084063261090522

sqrt(2)
X:   1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641572735013846
WA:  1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573
bc:  1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727
                      ***
py:  1.414213562373095145474621858738828450441360473632812500000000

- square  
scr_square.txt, square.bc  
;X:  340282366920938463426481119284349108225  
;bc: 340282366920938463426481119284349108225

- y^x as 2^64
X:      18446744073709551616
FPC:    18446744073709551616
WA:     18446744073709551616
bc:     18446744073709551607.46181800646615756984
py:     18446744073709551616

- Factorial
100!
X (60): 93326215443944152681699238856266700490715968264381621468592963895210320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
FPC:    93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
WA:     93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
py:     93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

- Inverse
1/89372978

X:      .000000011189064327698692103557296703260799925453977823140233729259
FPC:   0.0000000111890643276986921035572967032607999254539778231402337292599
WA:    0.000000011189064327698692103557296703260799925453977823140233729259
bc:     .000000011189064327698692103557296703260799925453977823140233
                                 ***
py:    0.000000011189064327698692839756645488885622441443956631701440

Note that Python numbers appear to have 17 decimal places of accuracy,
regardless of how the print statements are formatted.

=================================
I decided to skip testing of the sin/cos/tan functions and the log functions,
since there rarely is need for very high precision in those calculations.
If anyone sees anomalies in those functions at higher number of digits,
post an issue on the Github page at https://github.com/DerellLicht/WBigCalc,
providing the input value(s) and invalid results, and I will debug and run test vectors.
